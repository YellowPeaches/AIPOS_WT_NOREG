package com.wintec.lamp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.wintec.lamp.dao.entity.AccDto;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACC_DTO".
*/
public class AccDtoDao extends AbstractDao<AccDto, Long> {

    public static final String TABLENAME = "ACC_DTO";

    /**
     * Properties of entity AccDto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property AccNo = new Property(1, int.class, "accNo", false, "ACC_NO");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Content1 = new Property(3, String.class, "content1", false, "CONTENT1");
        public final static Property Content2 = new Property(4, String.class, "content2", false, "CONTENT2");
        public final static Property Content3 = new Property(5, String.class, "content3", false, "CONTENT3");
        public final static Property Content4 = new Property(6, String.class, "content4", false, "CONTENT4");
        public final static Property DepNo = new Property(7, int.class, "depNo", false, "DEP_NO");
        public final static Property Font1 = new Property(8, int.class, "font1", false, "FONT1");
        public final static Property Font2 = new Property(9, int.class, "font2", false, "FONT2");
        public final static Property Font3 = new Property(10, int.class, "font3", false, "FONT3");
        public final static Property Font4 = new Property(11, int.class, "font4", false, "FONT4");
        public final static Property GroupNo = new Property(12, int.class, "groupNo", false, "GROUP_NO");
    }


    public AccDtoDao(DaoConfig config) {
        super(config);
    }
    
    public AccDtoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACC_DTO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"ACC_NO\" INTEGER NOT NULL UNIQUE ," + // 1: accNo
                "\"CONTENT\" TEXT," + // 2: content
                "\"CONTENT1\" TEXT," + // 3: content1
                "\"CONTENT2\" TEXT," + // 4: content2
                "\"CONTENT3\" TEXT," + // 5: content3
                "\"CONTENT4\" TEXT," + // 6: content4
                "\"DEP_NO\" INTEGER NOT NULL ," + // 7: depNo
                "\"FONT1\" INTEGER NOT NULL ," + // 8: font1
                "\"FONT2\" INTEGER NOT NULL ," + // 9: font2
                "\"FONT3\" INTEGER NOT NULL ," + // 10: font3
                "\"FONT4\" INTEGER NOT NULL ," + // 11: font4
                "\"GROUP_NO\" INTEGER NOT NULL );"); // 12: groupNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACC_DTO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AccDto entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getAccNo());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String content1 = entity.getContent1();
        if (content1 != null) {
            stmt.bindString(4, content1);
        }
 
        String content2 = entity.getContent2();
        if (content2 != null) {
            stmt.bindString(5, content2);
        }
 
        String content3 = entity.getContent3();
        if (content3 != null) {
            stmt.bindString(6, content3);
        }
 
        String content4 = entity.getContent4();
        if (content4 != null) {
            stmt.bindString(7, content4);
        }
        stmt.bindLong(8, entity.getDepNo());
        stmt.bindLong(9, entity.getFont1());
        stmt.bindLong(10, entity.getFont2());
        stmt.bindLong(11, entity.getFont3());
        stmt.bindLong(12, entity.getFont4());
        stmt.bindLong(13, entity.getGroupNo());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AccDto entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getAccNo());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String content1 = entity.getContent1();
        if (content1 != null) {
            stmt.bindString(4, content1);
        }
 
        String content2 = entity.getContent2();
        if (content2 != null) {
            stmt.bindString(5, content2);
        }
 
        String content3 = entity.getContent3();
        if (content3 != null) {
            stmt.bindString(6, content3);
        }
 
        String content4 = entity.getContent4();
        if (content4 != null) {
            stmt.bindString(7, content4);
        }
        stmt.bindLong(8, entity.getDepNo());
        stmt.bindLong(9, entity.getFont1());
        stmt.bindLong(10, entity.getFont2());
        stmt.bindLong(11, entity.getFont3());
        stmt.bindLong(12, entity.getFont4());
        stmt.bindLong(13, entity.getGroupNo());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AccDto readEntity(Cursor cursor, int offset) {
        AccDto entity = new AccDto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // accNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content3
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content4
            cursor.getInt(offset + 7), // depNo
            cursor.getInt(offset + 8), // font1
            cursor.getInt(offset + 9), // font2
            cursor.getInt(offset + 10), // font3
            cursor.getInt(offset + 11), // font4
            cursor.getInt(offset + 12) // groupNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AccDto entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccNo(cursor.getInt(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent3(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContent4(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDepNo(cursor.getInt(offset + 7));
        entity.setFont1(cursor.getInt(offset + 8));
        entity.setFont2(cursor.getInt(offset + 9));
        entity.setFont3(cursor.getInt(offset + 10));
        entity.setFont4(cursor.getInt(offset + 11));
        entity.setGroupNo(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AccDto entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AccDto entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AccDto entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
