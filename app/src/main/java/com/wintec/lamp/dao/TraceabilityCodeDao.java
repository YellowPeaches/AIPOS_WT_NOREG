package com.wintec.lamp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wintec.lamp.dao.entity.TraceabilityCode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRACEABILITY_CODE".
*/
public class TraceabilityCodeDao extends AbstractDao<TraceabilityCode, Long> {

    public static final String TABLENAME = "TRACEABILITY_CODE";

    /**
     * Properties of entity TraceabilityCode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property PluNo = new Property(1, String.class, "pluNo", false, "PLU_NO");
        public final static Property ItemNo = new Property(2, String.class, "itemNo", false, "ITEM_NO");
        public final static Property TraceabilityCode = new Property(3, String.class, "traceabilityCode", false, "TRACEABILITY_CODE");
    }


    public TraceabilityCodeDao(DaoConfig config) {
        super(config);
    }
    
    public TraceabilityCodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRACEABILITY_CODE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"PLU_NO\" TEXT," + // 1: pluNo
                "\"ITEM_NO\" TEXT," + // 2: itemNo
                "\"TRACEABILITY_CODE\" TEXT);"); // 3: traceabilityCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRACEABILITY_CODE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TraceabilityCode entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String pluNo = entity.getPluNo();
        if (pluNo != null) {
            stmt.bindString(2, pluNo);
        }
 
        String itemNo = entity.getItemNo();
        if (itemNo != null) {
            stmt.bindString(3, itemNo);
        }
 
        String traceabilityCode = entity.getTraceabilityCode();
        if (traceabilityCode != null) {
            stmt.bindString(4, traceabilityCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TraceabilityCode entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String pluNo = entity.getPluNo();
        if (pluNo != null) {
            stmt.bindString(2, pluNo);
        }
 
        String itemNo = entity.getItemNo();
        if (itemNo != null) {
            stmt.bindString(3, itemNo);
        }
 
        String traceabilityCode = entity.getTraceabilityCode();
        if (traceabilityCode != null) {
            stmt.bindString(4, traceabilityCode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TraceabilityCode readEntity(Cursor cursor, int offset) {
        TraceabilityCode entity = new TraceabilityCode( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pluNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // itemNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // traceabilityCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TraceabilityCode entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPluNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItemNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTraceabilityCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TraceabilityCode entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TraceabilityCode entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TraceabilityCode entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
