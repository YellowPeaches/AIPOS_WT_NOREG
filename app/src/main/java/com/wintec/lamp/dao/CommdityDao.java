package com.wintec.lamp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.wintec.lamp.dao.entity.Commdity;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMDITY".
*/
public class CommdityDao extends AbstractDao<Commdity, Long> {

    public static final String TABLENAME = "COMMDITY";

    /**
     * Properties of entity Commdity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property ItemCode = new Property(2, String.class, "itemCode", false, "ITEM_CODE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Price = new Property(4, float.class, "price", false, "PRICE");
        public final static Property UnitId = new Property(5, Integer.class, "unitId", false, "UNIT_ID");
        public final static Property ClassifyId = new Property(6, Integer.class, "classifyId", false, "CLASSIFY_ID");
        public final static Property ClassifyName = new Property(7, String.class, "classifyName", false, "CLASSIFY_NAME");
        public final static Property PreviewImage = new Property(8, String.class, "previewImage", false, "PREVIEW_IMAGE");
        public final static Property SearchKey = new Property(9, String.class, "searchKey", false, "SEARCH_KEY");
        public final static Property ParentClassifyId = new Property(10, Integer.class, "parentClassifyId", false, "PARENT_CLASSIFY_ID");
        public final static Property ParentClassifyName = new Property(11, String.class, "parentClassifyName", false, "PARENT_CLASSIFY_NAME");
        public final static Property UnitPrint = new Property(12, String.class, "unitPrint", false, "UNIT_PRINT");
        public final static Property Click = new Property(13, Integer.class, "click", false, "CLICK");
        public final static Property Initials = new Property(14, String.class, "initials", false, "INITIALS");
        public final static Property CreateTime = new Property(15, String.class, "createTime", false, "CREATE_TIME");
        public final static Property NetFlag = new Property(16, Integer.class, "netFlag", false, "NET_FLAG");
        public final static Property BranchId = new Property(17, Integer.class, "branchId", false, "BRANCH_ID");
        public final static Property Top1Click = new Property(18, Integer.class, "top1Click", false, "TOP1_CLICK");
        public final static Property Top2T5Click = new Property(19, Integer.class, "top2T5Click", false, "TOP2_T5_CLICK");
        public final static Property ErrorClick = new Property(20, Integer.class, "errorClick", false, "ERROR_CLICK");
        public final static Property Accuracy = new Property(21, float.class, "accuracy", false, "ACCURACY");
    }


    public CommdityDao(DaoConfig config) {
        super(config);
    }
    
    public CommdityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMDITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"ID\" TEXT," + // 1: id
                "\"ITEM_CODE\" TEXT," + // 2: itemCode
                "\"NAME\" TEXT," + // 3: name
                "\"PRICE\" REAL NOT NULL ," + // 4: price
                "\"UNIT_ID\" INTEGER," + // 5: unitId
                "\"CLASSIFY_ID\" INTEGER," + // 6: classifyId
                "\"CLASSIFY_NAME\" TEXT," + // 7: classifyName
                "\"PREVIEW_IMAGE\" TEXT," + // 8: previewImage
                "\"SEARCH_KEY\" TEXT," + // 9: searchKey
                "\"PARENT_CLASSIFY_ID\" INTEGER," + // 10: parentClassifyId
                "\"PARENT_CLASSIFY_NAME\" TEXT," + // 11: parentClassifyName
                "\"UNIT_PRINT\" TEXT," + // 12: unitPrint
                "\"CLICK\" INTEGER," + // 13: click
                "\"INITIALS\" TEXT," + // 14: initials
                "\"CREATE_TIME\" TEXT," + // 15: createTime
                "\"NET_FLAG\" INTEGER," + // 16: netFlag
                "\"BRANCH_ID\" INTEGER," + // 17: branchId
                "\"TOP1_CLICK\" INTEGER," + // 18: top1Click
                "\"TOP2_T5_CLICK\" INTEGER," + // 19: top2T5Click
                "\"ERROR_CLICK\" INTEGER," + // 20: errorClick
                "\"ACCURACY\" REAL NOT NULL );"); // 21: accuracy
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMDITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Commdity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(3, itemCode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindDouble(5, entity.getPrice());
 
        Integer unitId = entity.getUnitId();
        if (unitId != null) {
            stmt.bindLong(6, unitId);
        }
 
        Integer classifyId = entity.getClassifyId();
        if (classifyId != null) {
            stmt.bindLong(7, classifyId);
        }
 
        String classifyName = entity.getClassifyName();
        if (classifyName != null) {
            stmt.bindString(8, classifyName);
        }
 
        String previewImage = entity.getPreviewImage();
        if (previewImage != null) {
            stmt.bindString(9, previewImage);
        }
 
        String searchKey = entity.getSearchKey();
        if (searchKey != null) {
            stmt.bindString(10, searchKey);
        }
 
        Integer parentClassifyId = entity.getParentClassifyId();
        if (parentClassifyId != null) {
            stmt.bindLong(11, parentClassifyId);
        }
 
        String parentClassifyName = entity.getParentClassifyName();
        if (parentClassifyName != null) {
            stmt.bindString(12, parentClassifyName);
        }
 
        String unitPrint = entity.getUnitPrint();
        if (unitPrint != null) {
            stmt.bindString(13, unitPrint);
        }
 
        Integer click = entity.getClick();
        if (click != null) {
            stmt.bindLong(14, click);
        }
 
        String initials = entity.getInitials();
        if (initials != null) {
            stmt.bindString(15, initials);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(16, createTime);
        }
 
        Integer netFlag = entity.getNetFlag();
        if (netFlag != null) {
            stmt.bindLong(17, netFlag);
        }
 
        Integer branchId = entity.getBranchId();
        if (branchId != null) {
            stmt.bindLong(18, branchId);
        }
 
        Integer top1Click = entity.getTop1Click();
        if (top1Click != null) {
            stmt.bindLong(19, top1Click);
        }
 
        Integer top2T5Click = entity.getTop2T5Click();
        if (top2T5Click != null) {
            stmt.bindLong(20, top2T5Click);
        }
 
        Integer errorClick = entity.getErrorClick();
        if (errorClick != null) {
            stmt.bindLong(21, errorClick);
        }
        stmt.bindDouble(22, entity.getAccuracy());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Commdity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(3, itemCode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindDouble(5, entity.getPrice());
 
        Integer unitId = entity.getUnitId();
        if (unitId != null) {
            stmt.bindLong(6, unitId);
        }
 
        Integer classifyId = entity.getClassifyId();
        if (classifyId != null) {
            stmt.bindLong(7, classifyId);
        }
 
        String classifyName = entity.getClassifyName();
        if (classifyName != null) {
            stmt.bindString(8, classifyName);
        }
 
        String previewImage = entity.getPreviewImage();
        if (previewImage != null) {
            stmt.bindString(9, previewImage);
        }
 
        String searchKey = entity.getSearchKey();
        if (searchKey != null) {
            stmt.bindString(10, searchKey);
        }
 
        Integer parentClassifyId = entity.getParentClassifyId();
        if (parentClassifyId != null) {
            stmt.bindLong(11, parentClassifyId);
        }
 
        String parentClassifyName = entity.getParentClassifyName();
        if (parentClassifyName != null) {
            stmt.bindString(12, parentClassifyName);
        }
 
        String unitPrint = entity.getUnitPrint();
        if (unitPrint != null) {
            stmt.bindString(13, unitPrint);
        }
 
        Integer click = entity.getClick();
        if (click != null) {
            stmt.bindLong(14, click);
        }
 
        String initials = entity.getInitials();
        if (initials != null) {
            stmt.bindString(15, initials);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(16, createTime);
        }
 
        Integer netFlag = entity.getNetFlag();
        if (netFlag != null) {
            stmt.bindLong(17, netFlag);
        }
 
        Integer branchId = entity.getBranchId();
        if (branchId != null) {
            stmt.bindLong(18, branchId);
        }
 
        Integer top1Click = entity.getTop1Click();
        if (top1Click != null) {
            stmt.bindLong(19, top1Click);
        }
 
        Integer top2T5Click = entity.getTop2T5Click();
        if (top2T5Click != null) {
            stmt.bindLong(20, top2T5Click);
        }
 
        Integer errorClick = entity.getErrorClick();
        if (errorClick != null) {
            stmt.bindLong(21, errorClick);
        }
        stmt.bindDouble(22, entity.getAccuracy());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Commdity readEntity(Cursor cursor, int offset) {
        Commdity entity = new Commdity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // itemCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getFloat(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // unitId
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // classifyId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // classifyName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // previewImage
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // searchKey
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // parentClassifyId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // parentClassifyName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // unitPrint
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // click
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // initials
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // createTime
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // netFlag
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // branchId
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // top1Click
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // top2T5Click
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // errorClick
            cursor.getFloat(offset + 21) // accuracy
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Commdity entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItemCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.getFloat(offset + 4));
        entity.setUnitId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setClassifyId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setClassifyName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPreviewImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSearchKey(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setParentClassifyId(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setParentClassifyName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUnitPrint(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setClick(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setInitials(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCreateTime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setNetFlag(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setBranchId(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setTop1Click(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setTop2T5Click(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setErrorClick(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setAccuracy(cursor.getFloat(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Commdity entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Commdity entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Commdity entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
