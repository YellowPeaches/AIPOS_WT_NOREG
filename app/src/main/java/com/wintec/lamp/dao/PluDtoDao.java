package com.wintec.lamp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wintec.lamp.dao.entity.PluDto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLU_DTO".
*/
public class PluDtoDao extends AbstractDao<PluDto, Long> {

    public static final String TABLENAME = "PLU_DTO";

    /**
     * Properties of entity PluDto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property BarcodeNo = new Property(1, int.class, "barcodeNo", false, "BARCODE_NO");
        public final static Property BestBeforeDate = new Property(2, String.class, "bestBeforeDate", false, "BEST_BEFORE_DATE");
        public final static Property BestBeforeDateFormat = new Property(3, String.class, "bestBeforeDateFormat", false, "BEST_BEFORE_DATE_FORMAT");
        public final static Property BestBeforeDateUnit = new Property(4, String.class, "bestBeforeDateUnit", false, "BEST_BEFORE_DATE_UNIT");
        public final static Property DeptNo = new Property(5, int.class, "deptNo", false, "DEPT_NO");
        public final static Property DiscountFlagA = new Property(6, boolean.class, "discountFlagA", false, "DISCOUNT_FLAG_A");
        public final static Property DiscountFlagB = new Property(7, boolean.class, "discountFlagB", false, "DISCOUNT_FLAG_B");
        public final static Property EtNo = new Property(8, int.class, "etNo", false, "ET_NO");
        public final static Property FixWeight = new Property(9, double.class, "fixWeight", false, "FIX_WEIGHT");
        public final static Property GraphicNoA = new Property(10, String.class, "graphicNoA", false, "GRAPHIC_NO_A");
        public final static Property GraphicNoB = new Property(11, String.class, "graphicNoB", false, "GRAPHIC_NO_B");
        public final static Property GraphicNoC = new Property(12, String.class, "graphicNoC", false, "GRAPHIC_NO_C");
        public final static Property GroupNo = new Property(13, int.class, "groupNo", false, "GROUP_NO");
        public final static Property IsPrintBestBeforeDate = new Property(14, boolean.class, "isPrintBestBeforeDate", false, "IS_PRINT_BEST_BEFORE_DATE");
        public final static Property IsPrintPackedDate = new Property(15, boolean.class, "isPrintPackedDate", false, "IS_PRINT_PACKED_DATE");
        public final static Property IsPrintSellByDate = new Property(16, boolean.class, "isPrintSellByDate", false, "IS_PRINT_SELL_BY_DATE");
        public final static Property IsSpecialPrice = new Property(17, boolean.class, "isSpecialPrice", false, "IS_SPECIAL_PRICE");
        public final static Property IsTraceable = new Property(18, boolean.class, "isTraceable", false, "IS_TRACEABLE");
        public final static Property ItemNo = new Property(19, String.class, "itemNo", false, "ITEM_NO");
        public final static Property LabelNoA = new Property(20, int.class, "labelNoA", false, "LABEL_NO_A");
        public final static Property LabelNoB = new Property(21, int.class, "labelNoB", false, "LABEL_NO_B");
        public final static Property LabelNoC = new Property(22, int.class, "labelNoC", false, "LABEL_NO_C");
        public final static Property NameTextA = new Property(23, String.class, "nameTextA", false, "NAME_TEXT_A");
        public final static Property NameTextB = new Property(24, String.class, "nameTextB", false, "NAME_TEXT_B");
        public final static Property NutritionNo = new Property(25, int.class, "nutritionNo", false, "NUTRITION_NO");
        public final static Property PackedDate = new Property(26, String.class, "packedDate", false, "PACKED_DATE");
        public final static Property PackedDateFormat = new Property(27, String.class, "packedDateFormat", false, "PACKED_DATE_FORMAT");
        public final static Property PackedDateUnit = new Property(28, String.class, "packedDateUnit", false, "PACKED_DATE_UNIT");
        public final static Property PluNo = new Property(29, String.class, "pluNo", false, "PLU_NO");
        public final static Property PriceChangeFlagA = new Property(30, boolean.class, "priceChangeFlagA", false, "PRICE_CHANGE_FLAG_A");
        public final static Property PriceChangeFlagB = new Property(31, boolean.class, "priceChangeFlagB", false, "PRICE_CHANGE_FLAG_B");
        public final static Property PriceRuleNo = new Property(32, int.class, "priceRuleNo", false, "PRICE_RULE_NO");
        public final static Property PriceUnitA = new Property(33, int.class, "priceUnitA", false, "PRICE_UNIT_A");
        public final static Property PriceUnitB = new Property(34, int.class, "priceUnitB", false, "PRICE_UNIT_B");
        public final static Property PriceUnitDesA = new Property(35, String.class, "priceUnitDesA", false, "PRICE_UNIT_DES_A");
        public final static Property PriceUnitDesB = new Property(36, String.class, "priceUnitDesB", false, "PRICE_UNIT_DES_B");
        public final static Property SafeHandingNo = new Property(37, int.class, "safeHandingNo", false, "SAFE_HANDING_NO");
        public final static Property SellByDate = new Property(38, String.class, "sellByDate", false, "SELL_BY_DATE");
        public final static Property SellByDateFormat = new Property(39, String.class, "sellByDateFormat", false, "SELL_BY_DATE_FORMAT");
        public final static Property SellByDateUnit = new Property(40, String.class, "sellByDateUnit", false, "SELL_BY_DATE_UNIT");
        public final static Property SpecialPrice = new Property(41, double.class, "specialPrice", false, "SPECIAL_PRICE");
        public final static Property SpecialPriceEndDate = new Property(42, String.class, "specialPriceEndDate", false, "SPECIAL_PRICE_END_DATE");
        public final static Property SpecialPriceStartDate = new Property(43, String.class, "specialPriceStartDate", false, "SPECIAL_PRICE_START_DATE");
        public final static Property TareNoA = new Property(44, int.class, "tareNoA", false, "TARE_NO_A");
        public final static Property UnitPriceA = new Property(45, float.class, "unitPriceA", false, "UNIT_PRICE_A");
        public final static Property UnitPriceB = new Property(46, int.class, "unitPriceB", false, "UNIT_PRICE_B");
        public final static Property Click = new Property(47, Integer.class, "click", false, "CLICK");
        public final static Property Initials = new Property(48, String.class, "initials", false, "INITIALS");
        public final static Property BranchId = new Property(49, String.class, "branchId", false, "BRANCH_ID");
        public final static Property PreviewImage = new Property(50, String.class, "previewImage", false, "PREVIEW_IMAGE");
    }


    public PluDtoDao(DaoConfig config) {
        super(config);
    }
    
    public PluDtoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLU_DTO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"BARCODE_NO\" INTEGER NOT NULL ," + // 1: barcodeNo
                "\"BEST_BEFORE_DATE\" TEXT," + // 2: bestBeforeDate
                "\"BEST_BEFORE_DATE_FORMAT\" TEXT," + // 3: bestBeforeDateFormat
                "\"BEST_BEFORE_DATE_UNIT\" TEXT," + // 4: bestBeforeDateUnit
                "\"DEPT_NO\" INTEGER NOT NULL ," + // 5: deptNo
                "\"DISCOUNT_FLAG_A\" INTEGER NOT NULL ," + // 6: discountFlagA
                "\"DISCOUNT_FLAG_B\" INTEGER NOT NULL ," + // 7: discountFlagB
                "\"ET_NO\" INTEGER NOT NULL ," + // 8: etNo
                "\"FIX_WEIGHT\" REAL NOT NULL ," + // 9: fixWeight
                "\"GRAPHIC_NO_A\" TEXT," + // 10: graphicNoA
                "\"GRAPHIC_NO_B\" TEXT," + // 11: graphicNoB
                "\"GRAPHIC_NO_C\" TEXT," + // 12: graphicNoC
                "\"GROUP_NO\" INTEGER NOT NULL ," + // 13: groupNo
                "\"IS_PRINT_BEST_BEFORE_DATE\" INTEGER NOT NULL ," + // 14: isPrintBestBeforeDate
                "\"IS_PRINT_PACKED_DATE\" INTEGER NOT NULL ," + // 15: isPrintPackedDate
                "\"IS_PRINT_SELL_BY_DATE\" INTEGER NOT NULL ," + // 16: isPrintSellByDate
                "\"IS_SPECIAL_PRICE\" INTEGER NOT NULL ," + // 17: isSpecialPrice
                "\"IS_TRACEABLE\" INTEGER NOT NULL ," + // 18: isTraceable
                "\"ITEM_NO\" TEXT," + // 19: itemNo
                "\"LABEL_NO_A\" INTEGER NOT NULL ," + // 20: labelNoA
                "\"LABEL_NO_B\" INTEGER NOT NULL ," + // 21: labelNoB
                "\"LABEL_NO_C\" INTEGER NOT NULL ," + // 22: labelNoC
                "\"NAME_TEXT_A\" TEXT," + // 23: nameTextA
                "\"NAME_TEXT_B\" TEXT," + // 24: nameTextB
                "\"NUTRITION_NO\" INTEGER NOT NULL ," + // 25: nutritionNo
                "\"PACKED_DATE\" TEXT," + // 26: packedDate
                "\"PACKED_DATE_FORMAT\" TEXT," + // 27: packedDateFormat
                "\"PACKED_DATE_UNIT\" TEXT," + // 28: packedDateUnit
                "\"PLU_NO\" TEXT UNIQUE ," + // 29: pluNo
                "\"PRICE_CHANGE_FLAG_A\" INTEGER NOT NULL ," + // 30: priceChangeFlagA
                "\"PRICE_CHANGE_FLAG_B\" INTEGER NOT NULL ," + // 31: priceChangeFlagB
                "\"PRICE_RULE_NO\" INTEGER NOT NULL ," + // 32: priceRuleNo
                "\"PRICE_UNIT_A\" INTEGER NOT NULL ," + // 33: priceUnitA
                "\"PRICE_UNIT_B\" INTEGER NOT NULL ," + // 34: priceUnitB
                "\"PRICE_UNIT_DES_A\" TEXT," + // 35: priceUnitDesA
                "\"PRICE_UNIT_DES_B\" TEXT," + // 36: priceUnitDesB
                "\"SAFE_HANDING_NO\" INTEGER NOT NULL ," + // 37: safeHandingNo
                "\"SELL_BY_DATE\" TEXT," + // 38: sellByDate
                "\"SELL_BY_DATE_FORMAT\" TEXT," + // 39: sellByDateFormat
                "\"SELL_BY_DATE_UNIT\" TEXT," + // 40: sellByDateUnit
                "\"SPECIAL_PRICE\" REAL NOT NULL ," + // 41: specialPrice
                "\"SPECIAL_PRICE_END_DATE\" TEXT," + // 42: specialPriceEndDate
                "\"SPECIAL_PRICE_START_DATE\" TEXT," + // 43: specialPriceStartDate
                "\"TARE_NO_A\" INTEGER NOT NULL ," + // 44: tareNoA
                "\"UNIT_PRICE_A\" REAL NOT NULL ," + // 45: unitPriceA
                "\"UNIT_PRICE_B\" INTEGER NOT NULL ," + // 46: unitPriceB
                "\"CLICK\" INTEGER," + // 47: click
                "\"INITIALS\" TEXT," + // 48: initials
                "\"BRANCH_ID\" TEXT," + // 49: branchId
                "\"PREVIEW_IMAGE\" TEXT);"); // 50: previewImage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLU_DTO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PluDto entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getBarcodeNo());
 
        String bestBeforeDate = entity.getBestBeforeDate();
        if (bestBeforeDate != null) {
            stmt.bindString(3, bestBeforeDate);
        }
 
        String bestBeforeDateFormat = entity.getBestBeforeDateFormat();
        if (bestBeforeDateFormat != null) {
            stmt.bindString(4, bestBeforeDateFormat);
        }
 
        String bestBeforeDateUnit = entity.getBestBeforeDateUnit();
        if (bestBeforeDateUnit != null) {
            stmt.bindString(5, bestBeforeDateUnit);
        }
        stmt.bindLong(6, entity.getDeptNo());
        stmt.bindLong(7, entity.getDiscountFlagA() ? 1L: 0L);
        stmt.bindLong(8, entity.getDiscountFlagB() ? 1L: 0L);
        stmt.bindLong(9, entity.getEtNo());
        stmt.bindDouble(10, entity.getFixWeight());
 
        String graphicNoA = entity.getGraphicNoA();
        if (graphicNoA != null) {
            stmt.bindString(11, graphicNoA);
        }
 
        String graphicNoB = entity.getGraphicNoB();
        if (graphicNoB != null) {
            stmt.bindString(12, graphicNoB);
        }
 
        String graphicNoC = entity.getGraphicNoC();
        if (graphicNoC != null) {
            stmt.bindString(13, graphicNoC);
        }
        stmt.bindLong(14, entity.getGroupNo());
        stmt.bindLong(15, entity.getIsPrintBestBeforeDate() ? 1L: 0L);
        stmt.bindLong(16, entity.getIsPrintPackedDate() ? 1L: 0L);
        stmt.bindLong(17, entity.getIsPrintSellByDate() ? 1L: 0L);
        stmt.bindLong(18, entity.getIsSpecialPrice() ? 1L: 0L);
        stmt.bindLong(19, entity.getIsTraceable() ? 1L: 0L);
 
        String itemNo = entity.getItemNo();
        if (itemNo != null) {
            stmt.bindString(20, itemNo);
        }
        stmt.bindLong(21, entity.getLabelNoA());
        stmt.bindLong(22, entity.getLabelNoB());
        stmt.bindLong(23, entity.getLabelNoC());
 
        String nameTextA = entity.getNameTextA();
        if (nameTextA != null) {
            stmt.bindString(24, nameTextA);
        }
 
        String nameTextB = entity.getNameTextB();
        if (nameTextB != null) {
            stmt.bindString(25, nameTextB);
        }
        stmt.bindLong(26, entity.getNutritionNo());
 
        String packedDate = entity.getPackedDate();
        if (packedDate != null) {
            stmt.bindString(27, packedDate);
        }
 
        String packedDateFormat = entity.getPackedDateFormat();
        if (packedDateFormat != null) {
            stmt.bindString(28, packedDateFormat);
        }
 
        String packedDateUnit = entity.getPackedDateUnit();
        if (packedDateUnit != null) {
            stmt.bindString(29, packedDateUnit);
        }
 
        String pluNo = entity.getPluNo();
        if (pluNo != null) {
            stmt.bindString(30, pluNo);
        }
        stmt.bindLong(31, entity.getPriceChangeFlagA() ? 1L: 0L);
        stmt.bindLong(32, entity.getPriceChangeFlagB() ? 1L: 0L);
        stmt.bindLong(33, entity.getPriceRuleNo());
        stmt.bindLong(34, entity.getPriceUnitA());
        stmt.bindLong(35, entity.getPriceUnitB());
 
        String priceUnitDesA = entity.getPriceUnitDesA();
        if (priceUnitDesA != null) {
            stmt.bindString(36, priceUnitDesA);
        }
 
        String priceUnitDesB = entity.getPriceUnitDesB();
        if (priceUnitDesB != null) {
            stmt.bindString(37, priceUnitDesB);
        }
        stmt.bindLong(38, entity.getSafeHandingNo());
 
        String sellByDate = entity.getSellByDate();
        if (sellByDate != null) {
            stmt.bindString(39, sellByDate);
        }
 
        String sellByDateFormat = entity.getSellByDateFormat();
        if (sellByDateFormat != null) {
            stmt.bindString(40, sellByDateFormat);
        }
 
        String sellByDateUnit = entity.getSellByDateUnit();
        if (sellByDateUnit != null) {
            stmt.bindString(41, sellByDateUnit);
        }
        stmt.bindDouble(42, entity.getSpecialPrice());
 
        String specialPriceEndDate = entity.getSpecialPriceEndDate();
        if (specialPriceEndDate != null) {
            stmt.bindString(43, specialPriceEndDate);
        }
 
        String specialPriceStartDate = entity.getSpecialPriceStartDate();
        if (specialPriceStartDate != null) {
            stmt.bindString(44, specialPriceStartDate);
        }
        stmt.bindLong(45, entity.getTareNoA());
        stmt.bindDouble(46, entity.getUnitPriceA());
        stmt.bindLong(47, entity.getUnitPriceB());
 
        Integer click = entity.getClick();
        if (click != null) {
            stmt.bindLong(48, click);
        }
 
        String initials = entity.getInitials();
        if (initials != null) {
            stmt.bindString(49, initials);
        }
 
        String branchId = entity.getBranchId();
        if (branchId != null) {
            stmt.bindString(50, branchId);
        }
 
        String previewImage = entity.getPreviewImage();
        if (previewImage != null) {
            stmt.bindString(51, previewImage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PluDto entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getBarcodeNo());
 
        String bestBeforeDate = entity.getBestBeforeDate();
        if (bestBeforeDate != null) {
            stmt.bindString(3, bestBeforeDate);
        }
 
        String bestBeforeDateFormat = entity.getBestBeforeDateFormat();
        if (bestBeforeDateFormat != null) {
            stmt.bindString(4, bestBeforeDateFormat);
        }
 
        String bestBeforeDateUnit = entity.getBestBeforeDateUnit();
        if (bestBeforeDateUnit != null) {
            stmt.bindString(5, bestBeforeDateUnit);
        }
        stmt.bindLong(6, entity.getDeptNo());
        stmt.bindLong(7, entity.getDiscountFlagA() ? 1L: 0L);
        stmt.bindLong(8, entity.getDiscountFlagB() ? 1L: 0L);
        stmt.bindLong(9, entity.getEtNo());
        stmt.bindDouble(10, entity.getFixWeight());
 
        String graphicNoA = entity.getGraphicNoA();
        if (graphicNoA != null) {
            stmt.bindString(11, graphicNoA);
        }
 
        String graphicNoB = entity.getGraphicNoB();
        if (graphicNoB != null) {
            stmt.bindString(12, graphicNoB);
        }
 
        String graphicNoC = entity.getGraphicNoC();
        if (graphicNoC != null) {
            stmt.bindString(13, graphicNoC);
        }
        stmt.bindLong(14, entity.getGroupNo());
        stmt.bindLong(15, entity.getIsPrintBestBeforeDate() ? 1L: 0L);
        stmt.bindLong(16, entity.getIsPrintPackedDate() ? 1L: 0L);
        stmt.bindLong(17, entity.getIsPrintSellByDate() ? 1L: 0L);
        stmt.bindLong(18, entity.getIsSpecialPrice() ? 1L: 0L);
        stmt.bindLong(19, entity.getIsTraceable() ? 1L: 0L);
 
        String itemNo = entity.getItemNo();
        if (itemNo != null) {
            stmt.bindString(20, itemNo);
        }
        stmt.bindLong(21, entity.getLabelNoA());
        stmt.bindLong(22, entity.getLabelNoB());
        stmt.bindLong(23, entity.getLabelNoC());
 
        String nameTextA = entity.getNameTextA();
        if (nameTextA != null) {
            stmt.bindString(24, nameTextA);
        }
 
        String nameTextB = entity.getNameTextB();
        if (nameTextB != null) {
            stmt.bindString(25, nameTextB);
        }
        stmt.bindLong(26, entity.getNutritionNo());
 
        String packedDate = entity.getPackedDate();
        if (packedDate != null) {
            stmt.bindString(27, packedDate);
        }
 
        String packedDateFormat = entity.getPackedDateFormat();
        if (packedDateFormat != null) {
            stmt.bindString(28, packedDateFormat);
        }
 
        String packedDateUnit = entity.getPackedDateUnit();
        if (packedDateUnit != null) {
            stmt.bindString(29, packedDateUnit);
        }
 
        String pluNo = entity.getPluNo();
        if (pluNo != null) {
            stmt.bindString(30, pluNo);
        }
        stmt.bindLong(31, entity.getPriceChangeFlagA() ? 1L: 0L);
        stmt.bindLong(32, entity.getPriceChangeFlagB() ? 1L: 0L);
        stmt.bindLong(33, entity.getPriceRuleNo());
        stmt.bindLong(34, entity.getPriceUnitA());
        stmt.bindLong(35, entity.getPriceUnitB());
 
        String priceUnitDesA = entity.getPriceUnitDesA();
        if (priceUnitDesA != null) {
            stmt.bindString(36, priceUnitDesA);
        }
 
        String priceUnitDesB = entity.getPriceUnitDesB();
        if (priceUnitDesB != null) {
            stmt.bindString(37, priceUnitDesB);
        }
        stmt.bindLong(38, entity.getSafeHandingNo());
 
        String sellByDate = entity.getSellByDate();
        if (sellByDate != null) {
            stmt.bindString(39, sellByDate);
        }
 
        String sellByDateFormat = entity.getSellByDateFormat();
        if (sellByDateFormat != null) {
            stmt.bindString(40, sellByDateFormat);
        }
 
        String sellByDateUnit = entity.getSellByDateUnit();
        if (sellByDateUnit != null) {
            stmt.bindString(41, sellByDateUnit);
        }
        stmt.bindDouble(42, entity.getSpecialPrice());
 
        String specialPriceEndDate = entity.getSpecialPriceEndDate();
        if (specialPriceEndDate != null) {
            stmt.bindString(43, specialPriceEndDate);
        }
 
        String specialPriceStartDate = entity.getSpecialPriceStartDate();
        if (specialPriceStartDate != null) {
            stmt.bindString(44, specialPriceStartDate);
        }
        stmt.bindLong(45, entity.getTareNoA());
        stmt.bindDouble(46, entity.getUnitPriceA());
        stmt.bindLong(47, entity.getUnitPriceB());
 
        Integer click = entity.getClick();
        if (click != null) {
            stmt.bindLong(48, click);
        }
 
        String initials = entity.getInitials();
        if (initials != null) {
            stmt.bindString(49, initials);
        }
 
        String branchId = entity.getBranchId();
        if (branchId != null) {
            stmt.bindString(50, branchId);
        }
 
        String previewImage = entity.getPreviewImage();
        if (previewImage != null) {
            stmt.bindString(51, previewImage);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PluDto readEntity(Cursor cursor, int offset) {
        PluDto entity = new PluDto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // barcodeNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bestBeforeDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bestBeforeDateFormat
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bestBeforeDateUnit
            cursor.getInt(offset + 5), // deptNo
            cursor.getShort(offset + 6) != 0, // discountFlagA
            cursor.getShort(offset + 7) != 0, // discountFlagB
            cursor.getInt(offset + 8), // etNo
            cursor.getDouble(offset + 9), // fixWeight
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // graphicNoA
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // graphicNoB
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // graphicNoC
            cursor.getInt(offset + 13), // groupNo
            cursor.getShort(offset + 14) != 0, // isPrintBestBeforeDate
            cursor.getShort(offset + 15) != 0, // isPrintPackedDate
            cursor.getShort(offset + 16) != 0, // isPrintSellByDate
            cursor.getShort(offset + 17) != 0, // isSpecialPrice
            cursor.getShort(offset + 18) != 0, // isTraceable
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // itemNo
            cursor.getInt(offset + 20), // labelNoA
            cursor.getInt(offset + 21), // labelNoB
            cursor.getInt(offset + 22), // labelNoC
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // nameTextA
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // nameTextB
            cursor.getInt(offset + 25), // nutritionNo
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // packedDate
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // packedDateFormat
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // packedDateUnit
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // pluNo
            cursor.getShort(offset + 30) != 0, // priceChangeFlagA
            cursor.getShort(offset + 31) != 0, // priceChangeFlagB
            cursor.getInt(offset + 32), // priceRuleNo
            cursor.getInt(offset + 33), // priceUnitA
            cursor.getInt(offset + 34), // priceUnitB
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // priceUnitDesA
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // priceUnitDesB
            cursor.getInt(offset + 37), // safeHandingNo
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // sellByDate
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // sellByDateFormat
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // sellByDateUnit
            cursor.getDouble(offset + 41), // specialPrice
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // specialPriceEndDate
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // specialPriceStartDate
            cursor.getInt(offset + 44), // tareNoA
            cursor.getFloat(offset + 45), // unitPriceA
            cursor.getInt(offset + 46), // unitPriceB
            cursor.isNull(offset + 47) ? null : cursor.getInt(offset + 47), // click
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // initials
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // branchId
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50) // previewImage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PluDto entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBarcodeNo(cursor.getInt(offset + 1));
        entity.setBestBeforeDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBestBeforeDateFormat(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBestBeforeDateUnit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeptNo(cursor.getInt(offset + 5));
        entity.setDiscountFlagA(cursor.getShort(offset + 6) != 0);
        entity.setDiscountFlagB(cursor.getShort(offset + 7) != 0);
        entity.setEtNo(cursor.getInt(offset + 8));
        entity.setFixWeight(cursor.getDouble(offset + 9));
        entity.setGraphicNoA(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGraphicNoB(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setGraphicNoC(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGroupNo(cursor.getInt(offset + 13));
        entity.setIsPrintBestBeforeDate(cursor.getShort(offset + 14) != 0);
        entity.setIsPrintPackedDate(cursor.getShort(offset + 15) != 0);
        entity.setIsPrintSellByDate(cursor.getShort(offset + 16) != 0);
        entity.setIsSpecialPrice(cursor.getShort(offset + 17) != 0);
        entity.setIsTraceable(cursor.getShort(offset + 18) != 0);
        entity.setItemNo(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLabelNoA(cursor.getInt(offset + 20));
        entity.setLabelNoB(cursor.getInt(offset + 21));
        entity.setLabelNoC(cursor.getInt(offset + 22));
        entity.setNameTextA(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setNameTextB(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setNutritionNo(cursor.getInt(offset + 25));
        entity.setPackedDate(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setPackedDateFormat(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setPackedDateUnit(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setPluNo(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setPriceChangeFlagA(cursor.getShort(offset + 30) != 0);
        entity.setPriceChangeFlagB(cursor.getShort(offset + 31) != 0);
        entity.setPriceRuleNo(cursor.getInt(offset + 32));
        entity.setPriceUnitA(cursor.getInt(offset + 33));
        entity.setPriceUnitB(cursor.getInt(offset + 34));
        entity.setPriceUnitDesA(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setPriceUnitDesB(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setSafeHandingNo(cursor.getInt(offset + 37));
        entity.setSellByDate(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setSellByDateFormat(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setSellByDateUnit(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setSpecialPrice(cursor.getDouble(offset + 41));
        entity.setSpecialPriceEndDate(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setSpecialPriceStartDate(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setTareNoA(cursor.getInt(offset + 44));
        entity.setUnitPriceA(cursor.getFloat(offset + 45));
        entity.setUnitPriceB(cursor.getInt(offset + 46));
        entity.setClick(cursor.isNull(offset + 47) ? null : cursor.getInt(offset + 47));
        entity.setInitials(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setBranchId(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setPreviewImage(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PluDto entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PluDto entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PluDto entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
