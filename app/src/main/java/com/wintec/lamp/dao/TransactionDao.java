package com.wintec.lamp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wintec.lamp.dao.entity.Transaction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION".
*/
public class TransactionDao extends AbstractDao<Transaction, Long> {

    public static final String TABLENAME = "TRANSACTION";

    /**
     * Properties of entity Transaction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PLU = new Property(1, String.class, "PLU", false, "PLU");
        public final static Property ItemNo = new Property(2, String.class, "itemNo", false, "ITEM_NO");
        public final static Property GoodName = new Property(3, String.class, "goodName", false, "GOOD_NAME");
        public final static Property CreateDate = new Property(4, Long.class, "createDate", false, "CREATE_DATE");
        public final static Property TransactionType = new Property(5, Integer.class, "transactionType", false, "TRANSACTION_TYPE");
        public final static Property Hit_Order = new Property(6, Integer.class, "hit_Order", false, "HIT__ORDER");
        public final static Property Net = new Property(7, double.class, "net", false, "NET");
        public final static Property UnitPrice = new Property(8, double.class, "unitPrice", false, "UNIT_PRICE");
        public final static Property TotalPrice = new Property(9, double.class, "totalPrice", false, "TOTAL_PRICE");
    }


    public TransactionDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PLU\" TEXT," + // 1: PLU
                "\"ITEM_NO\" TEXT," + // 2: itemNo
                "\"GOOD_NAME\" TEXT," + // 3: goodName
                "\"CREATE_DATE\" INTEGER," + // 4: createDate
                "\"TRANSACTION_TYPE\" INTEGER," + // 5: transactionType
                "\"HIT__ORDER\" INTEGER," + // 6: hit_Order
                "\"NET\" REAL NOT NULL ," + // 7: net
                "\"UNIT_PRICE\" REAL NOT NULL ," + // 8: unitPrice
                "\"TOTAL_PRICE\" REAL NOT NULL );"); // 9: totalPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Transaction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String PLU = entity.getPLU();
        if (PLU != null) {
            stmt.bindString(2, PLU);
        }
 
        String itemNo = entity.getItemNo();
        if (itemNo != null) {
            stmt.bindString(3, itemNo);
        }
 
        String goodName = entity.getGoodName();
        if (goodName != null) {
            stmt.bindString(4, goodName);
        }
 
        Long createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(5, createDate);
        }
 
        Integer transactionType = entity.getTransactionType();
        if (transactionType != null) {
            stmt.bindLong(6, transactionType);
        }
 
        Integer hit_Order = entity.getHit_Order();
        if (hit_Order != null) {
            stmt.bindLong(7, hit_Order);
        }
        stmt.bindDouble(8, entity.getNet());
        stmt.bindDouble(9, entity.getUnitPrice());
        stmt.bindDouble(10, entity.getTotalPrice());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Transaction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String PLU = entity.getPLU();
        if (PLU != null) {
            stmt.bindString(2, PLU);
        }
 
        String itemNo = entity.getItemNo();
        if (itemNo != null) {
            stmt.bindString(3, itemNo);
        }
 
        String goodName = entity.getGoodName();
        if (goodName != null) {
            stmt.bindString(4, goodName);
        }
 
        Long createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(5, createDate);
        }
 
        Integer transactionType = entity.getTransactionType();
        if (transactionType != null) {
            stmt.bindLong(6, transactionType);
        }
 
        Integer hit_Order = entity.getHit_Order();
        if (hit_Order != null) {
            stmt.bindLong(7, hit_Order);
        }
        stmt.bindDouble(8, entity.getNet());
        stmt.bindDouble(9, entity.getUnitPrice());
        stmt.bindDouble(10, entity.getTotalPrice());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Transaction readEntity(Cursor cursor, int offset) {
        Transaction entity = new Transaction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PLU
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // itemNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // goodName
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // createDate
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // transactionType
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // hit_Order
            cursor.getDouble(offset + 7), // net
            cursor.getDouble(offset + 8), // unitPrice
            cursor.getDouble(offset + 9) // totalPrice
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Transaction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPLU(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItemNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGoodName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateDate(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setTransactionType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setHit_Order(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setNet(cursor.getDouble(offset + 7));
        entity.setUnitPrice(cursor.getDouble(offset + 8));
        entity.setTotalPrice(cursor.getDouble(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Transaction entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Transaction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Transaction entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
